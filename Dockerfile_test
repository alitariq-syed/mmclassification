# syntax=docker/dockerfile:1

FROM mmlab_setup:test
#FROM pytorch/pytorch:1.13

#ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0+PTX"
#ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
#ENV CMAKE_PREFIX_PATH="$(dirname $(which conda))/../"

#RUN apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/* \
#    && --fix-missing

#RUN apt-get update && apt-get install -y git gcc \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*

# Install MMCV
#RUN pip install --no-cache-dir --upgrade pip wheel setuptools
#RUN pip install --no-cache-dir mmcv-full==1.3.17 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/index.html

# Install MMDetection
#RUN conda clean --all
#RUN git clone https://github.com/alitariq-syed/mmdetection.git /mmdetection
#COPY mmsegmentation mmsegmentation
#COPY mmclassification mmclassification

#WORKDIR /mmsegmentation
#ENV FORCE_CUDA="1"
#RUN ls
#RUN pip install --no-cache-dir -r requirements.txt
#RUN pip install --no-cache-dir -e .

# Install MMClassification
#RUN conda clean --all
#RUN git clone https://github.com/alitariq-syed/mmclassification.git /mmclassification
#WORKDIR /mmclassification
#ENV FORCE_CUDA="1"
#RUN pip install --no-cache-dir -e .


WORKDIR /app

#COPY requirements.txt requirements.txt
#RUN pip3 install -r requirements.txt

COPY . .


#CMD [ "python3", "-m" , "flask", "run", "--host=0.0.0.0"]